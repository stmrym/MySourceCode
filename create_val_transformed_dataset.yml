# RandomGaussianNoise:
  # gaussian_para: [0, 1.0e-4]  # mu, std_var
  # gaussian_para: [0, 1.0e-4]  # mu, std_var


# for blur only transform 
# RandomBlur:
#   params:
#     kernel_size: [7, 9, 11, 13, 15, 17, 19, 21]
#     kernel_list: ['iso', 'aniso', 'generalized_iso', 'generalized_aniso',
#                   'plateau_iso', 'plateau_aniso', 'sinc']
#     kernel_prob: [0.405, 0.225, 0.108, 0.027, 0.108, 0.027, 0.1]
#     sigma_x: [0.2, 3]
#     sigma_y: [0.2, 3]
#     rotate_angle: [-3.1416, 3.1416]
#     beta_gaussian: [0.5, 4]
#     beta_plateau: [1, 2]
#     sigma_x_step: 0.02
#     sigma_y_step: 0.02
#     rotate_angle_step: 0.31416
#     beta_gaussian_step: 0.05
#     beta_plateau_step: 0.1
#     omega_step: 0.0628

# RandomNoise:
#   params:
#     noise_type: ['gaussian', 'poisson']
#     noise_prob: [0.5, 0.5]
#     gaussian_sigma: [1, 30]
#     gaussian_gray_noise_prob: 0.4
#     poisson_scale: [0.05, 3]
#     poisson_gray_noise_prob: 0.4
#     gaussian_sigma_step: 0.1
#     poisson_scale_step: 0.005





UnsharpMasking:
  kernel_size_l: [3, 5, 7, 9] # 51
  sigma: 0
  weight_prob: [0, 4] # 0.5
  threshold: 10 # 40



# RandomJPEGCompression:
#   params:
#     quality: [80, 95]
#     quality_step: 1

RandomVideoCompression:
  params:
    codec: ['libx264', 'h264', 'mpeg4']
    codec_prob: [1/3, 1/3, 1/3]
    bitrate: [1.0e+4, 1.0e+5]
  
